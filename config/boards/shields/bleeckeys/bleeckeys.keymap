#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/pointing.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <input/processors.dtsi>    

#define QUICK_TAP_MS 125
#define TAPPING_TERM_MS 150
#define SLOW_TAPPING_TERM_MS 350
#define IDLE_TIMEOUT_MS 5000
#define REQ_IDLE_MS 350

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 31 32 33
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 36 37 38
#define KEYS_T 34 35 40 41 42 43 44 45 46 47 48



&mmv_input_listener {
    turbo {
        layers = <7>;
        input-processors = <&zip_xy_scaler 4 1>;
    }; 
};

&msc_input_listener {
    turbo_scroll {
        layers = <7>;
        input-processors = <&zip_scroll_scaler  3 1>;
    }; 
};

/ {

    macros {
        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings
                = <&macro_param_1to1>
                , <&macro_press &mo MACRO_PLACEHOLDER>
                , <&macro_param_2to1>
                , <&macro_press &kp MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_param_2to1>
                , <&macro_release &kp MACRO_PLACEHOLDER>
                , <&macro_param_1to1>
                , <&macro_release &mo MACRO_PLACEHOLDER>
                ;
        };
    base_layer_macro: base_layer_macro {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp F23 &to 0>;
        };
    nav_layer_macro: nav_layer_macro {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp F24 &to 3>;
        };
    };

    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance"; 
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&mo 2>;
        };
        hmtl: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            flavor = "balanced";
            require-prior-idle-ms = <REQ_IDLE_MS>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };
        hmtr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            flavor = "balanced";
            require-prior-idle-ms = <REQ_IDLE_MS>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };
        hmtLayerL: homerow_layer_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LAYER_LEFT_HAND";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            flavor = "balanced";
            require-prior-idle-ms = <REQ_IDLE_MS>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };
        hmtLayerR: homerow_layer_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LAYER_RIGHT_HAND";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            flavor = "balanced";
            require-prior-idle-ms = <REQ_IDLE_MS>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_capslock {
            timeout-ms = <200>;
            key-positions = <42 47>;
            bindings = <&caps_word>;
        };
        
        combo_capsmod_right {
            timeout-ms = <200>;
            key-positions = <35 48>;
            bindings = <&mo 1>;
        };
        combo_return_left {
            timeout-ms = <200>;
            key-positions = <41 42>;
            bindings = <&kp RET>;
        };
        combo_bluetooth{
            timeout-ms=<200>;
            key-positions = <40 42 44>;
            bindings = <&tog 6>;
        };
//        combo_homerow{
//            timeout-ms=<200>;
//            key-positions = <34 35>;
//            bindings = <&mo 2>;
//        };
        combo_symbol_shift_right{
            timeout-ms=<200>;
            key-positions = <47 48>;
            bindings = <&lm 3 LSHIFT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

            default_layer {
                display-name = "BASE";
                bindings = <
&kp Q	&kp W	&kp E	&kp R	&kp T		&kp Y	
>;

                sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            };

 
    };
};